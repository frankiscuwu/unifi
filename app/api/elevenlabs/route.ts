import { NextRequest } from "next/server";

export const runtime = "nodejs";

function getKey() {
  const key = process.env.ELEVEN_LABS_KEY || process.env.ELEVENLABS_API_KEY;
  if (!key) throw new Error("Missing ELEVEN_LABS_KEY env var");
  return key;
}

const DEFAULT_VOICE_ID = process.env.ELEVEN_LABS_VOICE_ID || "21m00Tcm4TlvDq8ikWAM"; // Default voice: Rachel
const DEFAULT_MODEL_ID = process.env.ELEVEN_LABS_MODEL_ID || "eleven_multilingual_v2";

export async function POST(req: NextRequest) {
  try {
    let body: any = {};
    try {
      body = await req.json();
    } catch {
      // ignore if no json body
    }

    const text: string = typeof body?.text === "string" && body.text.trim()
      ? body.text.trim()
      : "This is a test generated by ElevenLabs. Hello from your app!";
    const voiceId: string = body?.voiceId || DEFAULT_VOICE_ID;
    const modelId: string = body?.modelId || DEFAULT_MODEL_ID;
    const optimizeLatency: number = Number(body?.optimizeStreamingLatency ?? 0);

    const key = getKey();

    const res = await fetch(
      `https://api.elevenlabs.io/v1/text-to-speech/${encodeURIComponent(voiceId)}?optimize_streaming_latency=${optimizeLatency}`,
      {
        method: "POST",
        headers: {
          "xi-api-key": key,
          "Content-Type": "application/json",
          Accept: "audio/mpeg",
        },
        body: JSON.stringify({
          text,
          model_id: modelId,
          voice_settings: {
            stability: 0.5,
            similarity_boost: 0.8,
          },
        }),
      }
    );

    if (!res.ok) {
      const msg = await safeText(res);
      console.error("ElevenLabs upstream error:", res.status, res.statusText, msg);
      return new Response(
        JSON.stringify({ ok: false, upstreamStatus: res.status, error: `ElevenLabs error ${res.status}: ${msg}` }),
        { status: 502, headers: { "Content-Type": "application/json" } }
      );
    }

    const audioBuffer = Buffer.from(await res.arrayBuffer());
    return new Response(audioBuffer, {
      status: 200,
      headers: {
        "Content-Type": "audio/mpeg",
        "Content-Length": String(audioBuffer.length),
        "Cache-Control": "no-store",
      },
    });
  } catch (err: any) {
    console.error("/api/elevenlabs handler error:", err);
    return new Response(
      JSON.stringify({ ok: false, error: err?.message || "Server error" }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
}

async function safeText(res: Response) {
  try {
    return await res.text();
  } catch {
    return "";
  }
}
